Approach:
- Relations between tables are as follows:
    Customer to Calls: 1 to Many
    Agent to Calls: 1 to Many
    Customer to Agent: 1 to Many
- We display the grid in a Blade view.
- Filters are passed in the following format: filter[modelName][field] = value In query param:
    ?filter[Customer][name]=John&filter[Agent][id]=2
- On load, the data is fetched from the database. Users can select the filters, which are generated by the backend in a
    generic way, according to the selected model. Filters for date and agent are hard coded.
- We paginate the data in the backend, so it doesn't load all the data at once.

Assumptions:
- Currently, we don't need any many-to-many relationships between the tables. I assumed a Customer can be assigned to
    only one Agent, and a Call can be assigned to only one Customer and Agent. If it wasn't the case, we would have to
    create a pivot table for many-to-many relationships.
- I know it's bad that the page refreshes with each request! I left it like that because the task is supposed to be short.
    I would've used AJAX or Laravel Livewire otherwise.


Steps Taken:
- Understanding the task.
- Thinking about relationships between models.
- Figuring out the approach, including how the data flows.
- Creating models, controllers, services and migrations.
- Creating relationships between models.
- Creating the routes and endpoints.
- Creating views - Blade templates: index, grid, and filters.
- Creating dummy data.
- Cleaning up the code.

Bonus: Ways of Increasing the Performance:
- Indexing: ID is indexed by default in Laravel. Also indexed created_at.
- Caching: Added cache to Agents to make repeated requests faster. We can add it to the Call query as well. We can also
    add cache in the frontend.
- Pagination: Could add frontend pagination, so it won't send a request to the backend with each page.
- Chunking: We could chunk the data in the backend, so it doesn't load all the data at once.
- Frontend Lazy Loading: Could load the data as the user scrolls down, instead of paginating.
- Optimizing Queries: Used inner joins instead of Eloquent relations to make the query faster.

Revision:
- Reduced coupling
- Moved code from route and controller to service
